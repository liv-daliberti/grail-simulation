#!/usr/bin/env python
# Copyright 2025 The Grail Simulation Contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Reusable helpers for persisting and loading pipeline metrics."""

from __future__ import annotations

import json
import logging
from pathlib import Path
from typing import Callable, Dict, Mapping, Optional

MetricsPayload = Dict[str, object]
MetricsFactory = Callable[[], MetricsPayload]


def persist_metrics_payload(
    metrics_path: Path,
    metrics: Mapping[str, object],
    *,
    debug_message: str,
    logger: Optional[logging.Logger] = None,
) -> None:
    """
    Persist a metrics payload to disk, tolerating missing directories and IO errors.

    :param metrics_path: Destination path for the metrics payload.
    :type metrics_path: Path
    :param metrics: Metrics mapping to serialise.
    :type metrics: Mapping[str, object]
    :param debug_message: Debug log message emitted when persistence fails.
    :type debug_message: str
    :param logger: Logger used when persistence fails. Defaults to this module's logger.
    :type logger: logging.Logger | None
    :returns: ``None``.
    :rtype: None
    """

    metrics_logger = logger or logging.getLogger(__name__)
    metrics_path.parent.mkdir(parents=True, exist_ok=True)
    try:
        with metrics_path.open("w", encoding="utf-8") as handle:
            json.dump(metrics, handle, indent=2)
    except OSError:  # pragma: no cover - best-effort breadcrumb
        metrics_logger.debug(debug_message, metrics_path)


def ensure_metrics_with_placeholder(
    loader: Callable[[], MetricsPayload | None],
    *,
    placeholder_factory: MetricsFactory,
    metrics_path: Path,
    debug_message: str,
    logger: Optional[logging.Logger] = None,
) -> MetricsPayload:
    """
    Return metrics produced by ``loader`` or materialise a placeholder payload.

    :param loader: Callable returning the metrics payload or ``None`` when unavailable.
    :type loader: Callable[[], MetricsPayload | None]
    :param placeholder_factory: Callable producing a placeholder metrics payload.
    :type placeholder_factory: MetricsFactory
    :param metrics_path: Filesystem path where metrics should be written.
    :type metrics_path: Path
    :param debug_message: Debug log message used when persisting placeholders fails.
    :type debug_message: str
    :param logger: Logger used when placeholder persistence fails. Defaults to this module's logger.
    :type logger: logging.Logger | None
    :returns: Metrics payload retrieved or generated by the placeholder.
    :rtype: Dict[str, object]
    """

    metrics = loader()
    if metrics is not None:
        return metrics

    placeholder = placeholder_factory()
    persist_metrics_payload(
        metrics_path,
        placeholder,
        debug_message=debug_message,
        logger=logger,
    )
    return placeholder


__all__ = [
    "MetricsFactory",
    "MetricsPayload",
    "ensure_metrics_with_placeholder",
    "persist_metrics_payload",
]
