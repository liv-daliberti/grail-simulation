#!/usr/bin/env python
# Copyright 2025 The Grail Simulation Contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Catalog README builder for the XGBoost pipeline reports."""

from __future__ import annotations

from pathlib import Path
from typing import List

from common.pipeline_io import write_markdown_lines


def _write_catalog_report(
    reports_root: Path,
    *,
    include_next_video: bool,
    include_opinion: bool,
) -> None:
    """
    Create the catalog README summarising generated artefacts.

    :param reports_root: Filesystem directory that will receive the Markdown reports.
    :type reports_root: Path
    :param include_next_video: Flag signalling whether next-video report sections
        should be rendered.
    :type include_next_video: bool
    :param include_opinion: Flag signalling whether opinion report sections should
        be rendered.
    :type include_opinion: bool
    """

    reports_root.mkdir(parents=True, exist_ok=True)
    path = reports_root / "README.md"
    lines: List[str] = []
    lines.append("# XGBoost Report Catalog")
    lines.append("")
    lines.append("Slate-ranking and opinion-regression baselines trained with XGBoost.")
    lines.append(
        "Feature spaces include TF-IDF, Word2Vec, and Sentence-Transformer representations."
    )
    lines.append("")
    lines.append(
        "These summaries are regenerated by `python -m xgb.pipeline` (or the training wrappers)."
    )
    lines.append("Each report captures the current XGBoost baseline performance at a glance.")
    lines.append("")
    lines.append(
        "- `additional_features/README.md` — overview of the extra text fields appended to prompts."
    )
    lines.append("")
    if include_next_video:
        lines.append(
            "- `hyperparameter_tuning/README.md` — sweep leaderboards and the per-study winners."
        )
        lines.append(
            "- `next_video/README.md` — validation accuracy, confidence intervals, baseline deltas,"
            " and training versus validation accuracy curves for the production slate task."
        )
    if include_opinion:
        lines.append(
            "- `opinion/README.md` — post-study opinion regression metrics, plus heatmaps under "
            "`reports/xgb/opinion/`."
        )
    lines.append("")
    artifact_roots: List[str] = []
    if include_next_video:
        artifact_roots.append("models/xgb/next_video")
    if include_opinion:
        artifact_roots.append("models/xgb/opinions")
    if artifact_roots:
        formatted_roots = " or ".join(f"`{root}`" for root in artifact_roots)
        lines.append(
            f"All referenced Markdown artifacts live under {formatted_roots}. "
            "Re-running the pipeline refreshes them with new metrics."
        )
    else:
        lines.append("Re-running the pipeline refreshes metrics once tasks are enabled.")
    lines.append("")
    lines.append("## Refreshing Reports")
    lines.append("")
    lines.append("```bash")
    lines.append("PYTHONPATH=src python -m xgb.pipeline --stage full \\")
    lines.append("  --out-dir models/xgb \\")
    lines.append("  --reports-dir reports/xgb")
    lines.append("```")
    lines.append("")
    lines.append(
        "Stages can be invoked individually (`plan`, `sweeps`, `finalize`, `reports`) to match existing SLURM workflows."
    )
    lines.append("")
    write_markdown_lines(path, lines)


__all__ = ["_write_catalog_report"]
